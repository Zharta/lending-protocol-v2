{"notice": "This contract keeps some lending parameters for P2P lending contracts, namely the whitelisted collections and the broker pre-agreements.", "methods": {"propose_owner(address)": {"notice": "Propose a new owner"}, "claim_ownership()": {"notice": "Claim the ownership of the contract"}, "change_whitelisted_collections((address,bool)[])": {"notice": "Set whitelisted collections"}, "set_max_broker_lock_duration(uint256)": {"notice": "Set the maximum broker lock duration"}, "add_broker_lock(address,uint256,address,uint256)": {"notice": "Add a broker lock"}, "remove_broker_lock(address,uint256)": {"notice": "Remove a broker lock"}, "get_broker_lock(address,uint256)": {"notice": "Get the broker lock"}, "get_collateral_status(address,uint256)": {"notice": "Get the collateral status"}}}
{"title": "P2PLendingControl", "author": "[Zharta](https://zharta.io/)", "methods": {"propose_owner(address)": {"details": "Proposes a new owner and logs the event. Admin function.", "params": {"_address": "The address of the proposed owner."}}, "claim_ownership()": {"details": "Claims the ownership of the contract and logs the event. Requires the caller to be the proposed owner."}, "change_whitelisted_collections((address,bool)[])": {"params": {"collections": "array of WhitelistRecord"}}, "set_max_broker_lock_duration(uint256)": {"params": {"duration": "duration in seconds"}}, "add_broker_lock(address,uint256,address,uint256)": {"params": {"collateral_address": "address of the collateral contract", "collateral_token_id": "token id of the collateral", "broker": "address of the broker", "expiration": "expiration time for the lock"}}, "remove_broker_lock(address,uint256)": {"params": {"collateral_address": "address of the collateral contract", "collateral_token_id": "token id of the collateral"}}, "get_broker_lock(address,uint256)": {"params": {"collateral_address": "address of the collateral contract", "collateral_token_id": "token id of the collateral"}, "returns": {"_0": "lock expiration time and address of the broker"}}, "get_collateral_status(address,uint256)": {"params": {"collateral_address": "address of the collateral contract", "collateral_token_id": "token id of the collateral"}, "returns": {"_0": "broker lock and whitelisted status"}}}}
