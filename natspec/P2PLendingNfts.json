{"notice": "This contract facilitates peer-to-peer lending using NFTs as collateral.", "methods": {"__init__(address,address,address,uint256,uint256,address)": {"notice": "Initialize the contract with the given parameters."}, "set_protocol_fee(uint256,uint256)": {"notice": "Set the protocol fee"}, "change_protocol_wallet(address)": {"notice": "Change the protocol wallet"}, "set_proxy_authorization(address,bool)": {"notice": "Set authorization"}, "propose_owner(address)": {"notice": "Propose a new owner"}, "claim_ownership()": {"notice": "Claim the ownership of the contract"}, "change_whitelisted_collections((address,bool)[])": {"notice": "Set whitelisted collections"}, "create_loan(((uint256,uint256,address,uint256,uint256,uint256,uint256,address,address,uint256,uint256[],uint256,address,bool,uint256),(uint256,uint256,uint256)),uint256,address,uint256,uint256,address)": {"notice": "Create a loan."}, "settle_loan((bytes32,uint256,uint256,address,uint256,uint256,address,address,address,uint256,(uint256,uint256,uint256,address)[],bool))": {"notice": "Settle a loan."}, "claim_defaulted_loan_collateral((bytes32,uint256,uint256,address,uint256,uint256,address,address,address,uint256,(uint256,uint256,uint256,address)[],bool))": {"notice": "Claim defaulted loan collateral."}, "replace_loan((bytes32,uint256,uint256,address,uint256,uint256,address,address,address,uint256,(uint256,uint256,uint256,address)[],bool),((uint256,uint256,address,uint256,uint256,uint256,uint256,address,address,uint256,uint256[],uint256,address,bool,uint256),(uint256,uint256,uint256)),uint256,uint256,address)": {"notice": "Replace an existing loan by accepting a new offer over the same collateral. The current loan is settled and the new loan is created. Must be called by the borrower."}, "replace_loan_lender((bytes32,uint256,uint256,address,uint256,uint256,address,address,address,uint256,(uint256,uint256,uint256,address)[],bool),((uint256,uint256,address,uint256,uint256,uint256,uint256,address,address,uint256,uint256[],uint256,address,bool,uint256),(uint256,uint256,uint256)))": {"notice": "Replace a loan by the lender. The current loan is settled and the new loan is created. Must be called by the lender."}, "revoke_offer(((uint256,uint256,address,uint256,uint256,uint256,uint256,address,address,uint256,uint256[],uint256,address,bool,uint256),(uint256,uint256,uint256)))": {"notice": "Revoke an offer."}, "onERC721Received(address,address,uint256,bytes)": {"notice": "ERC721 token receiver callback."}}}
{"title": "P2PLendingNfts", "author": "[Zharta](https://zharta.io/)", "details": "It facilitates peer-to-peer lending using NFTs as collateral. The contract allows lenders to offer loans and borrowers to accept them by providing NFTs as collateral. Key functionalities include: - Creating and managing loan offers - Accepting loan offers and locking NFTs as collateral - Accepts ERC721 and CryptoPunks NFTs as collateral - Delegating the collateral using [Delegate](https://delegate.xyz/) DelegateRegistry v2 - Settling loans by repaying the principal and interest - Claiming collateral in case of loan default - Replacing existing loans with new terms - Four types of fees are supported: protocol fee, origination fee, lender broker fee, and borrower broker fee - Managing protocol fees and authorized proxies - Handling ownership transfer of the contract - Loan state is kept hashed in the contract to save gas The contract ensures secure and transparent lending operations within the Zharta ecosystem.", "methods": {"__init__(address,address,address,uint256,uint256,address)": {"params": {"_payment_token": "The address of the payment token.", "_delegation_registry": "The address of the delegation registry.", "_cryptopunks": "The address of the CryptoPunksMarket contract.", "_protocol_upfront_fee": "The percentage (bps) of the principal paid to the protocol at origination.", "_protocol_settlement_fee": "The percentage (bps) of the interest paid to the protocol at settlement.", "_protocol_wallet": "The address where the protocol fees are accrued."}}, "set_protocol_fee(uint256,uint256)": {"details": "Sets the protocol fee to the given value and logs the event. Admin function.", "params": {"protocol_upfront_fee": "The new protocol upfront fee.", "protocol_settlement_fee": "The new protocol settlement fee."}}, "change_protocol_wallet(address)": {"details": "Changes the protocol wallet to the given address and logs the event. Admin function.", "params": {"new_protocol_wallet": "The new protocol wallet."}}, "set_proxy_authorization(address,bool)": {"details": "Sets the authorization for the given proxy and logs the event. Admin function.", "params": {"_proxy": "The address of the proxy.", "_value": "The value of the authorization."}}, "propose_owner(address)": {"details": "Proposes a new owner and logs the event. Admin function.", "params": {"_address": "The address of the proposed owner."}}, "claim_ownership()": {"details": "Claims the ownership of the contract and logs the event. Requires the caller to be the proposed owner."}, "change_whitelisted_collections((address,bool)[])": {"params": {"collections": "array of WhitelistRecord"}}, "create_loan(((uint256,uint256,address,uint256,uint256,uint256,uint256,address,address,uint256,uint256[],uint256,address,bool,uint256),(uint256,uint256,uint256)),uint256,address,uint256,uint256,address)": {"params": {"offer": "The signed offer.", "collateral_token_id": "The ID of the collateral token.", "delegate": "The address of the delegate. If empty, no delegation is set.", "borrower_broker_upfront_fee_amount": "The upfront fee amount for the borrower broker.", "borrower_broker_settlement_fee_bps": "The settlement fee basis points relative to the interest for the borrower broker.", "borrower_broker": "The address of the borrower broker."}, "returns": {"_0": "The ID of the created loan."}}, "settle_loan((bytes32,uint256,uint256,address,uint256,uint256,address,address,address,uint256,(uint256,uint256,uint256,address)[],bool))": {"params": {"loan": "The loan to be settled."}}, "claim_defaulted_loan_collateral((bytes32,uint256,uint256,address,uint256,uint256,address,address,address,uint256,(uint256,uint256,uint256,address)[],bool))": {"params": {"loan": "The loan whose collateral is to be claimed. The loan maturity must have been passed."}}, "replace_loan((bytes32,uint256,uint256,address,uint256,uint256,address,address,address,uint256,(uint256,uint256,uint256,address)[],bool),((uint256,uint256,address,uint256,uint256,uint256,uint256,address,address,uint256,uint256[],uint256,address,bool,uint256),(uint256,uint256,uint256)),uint256,uint256,address)": {"details": "No collateral transfer is required and the delegation is not changed. The borrower must be the same as the borrower of the current loan.", "params": {"loan": "The loan to be replaced.", "offer": "The new signed offer.", "borrower_broker_upfront_fee_amount": "The upfront fee amount for the borrower broker.", "borrower_broker_settlement_fee_bps": "The settlement fee basis points relative to the interest for the borrower broker.", "borrower_broker": "The address of the borrower broker, if any."}, "returns": {"_0": "The ID of the new loan."}}, "replace_loan_lender((bytes32,uint256,uint256,address,uint256,uint256,address,address,address,uint256,(uint256,uint256,uint256,address)[],bool),((uint256,uint256,address,uint256,uint256,uint256,uint256,address,address,uint256,uint256[],uint256,address,bool,uint256),(uint256,uint256,uint256)))": {"details": "No collateral transfer is required and the delegation is not changed. The borrower must be the same as the borrower of the current loan. No funds are required from the borrower. Also no funds are required from the lender, except when the current and new lender are the same.", "params": {"loan": "The loan to be replaced.", "offer": "The new signed offer."}, "returns": {"_0": "The ID of the new loan."}}, "revoke_offer(((uint256,uint256,address,uint256,uint256,uint256,uint256,address,address,uint256,uint256[],uint256,address,bool,uint256),(uint256,uint256,uint256)))": {"params": {"offer": "The signed offer to be revoked."}}, "onERC721Received(address,address,uint256,bytes)": {"details": "Returns the ERC721 receiver callback selector.", "params": {"_operator": "The address which called `safeTransferFrom` function.", "_from": "The address which previously owned the token.", "_tokenId": "The NFT identifier which is being transferred.", "_data": "Additional data with no specified format."}, "returns": {"_0": "The ERC721 receiver callback selector."}}}}
